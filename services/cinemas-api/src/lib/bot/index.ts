/* eslint-disable max-len */
import { config } from '@config';
import { Cinema, getTelegramApi, isBotCmd, Log, TGMessage, TGUpdate } from '@core';
import { getFilmaxCinema, getGalaxyCinema } from '@lib/cinemas';
import { errToStr, isNum, isUnknownDict, unique } from '@utils';

const commandsMsgText = `
/schedule - –†–æ–∑–∫–ª–∞–¥ —Å–µ–∞–Ω—Å—ñ–≤
/help - –î–æ–ø–æ–º–æ–≥–∞
`;
const helloMsgText = `–ü—Ä–∏–≤—ñ—Ç ‚úã! –Ø –∑–±–∏—Ä–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–∞–Ω—Å–∏ —Ñ—ñ–ª—å–º—ñ–≤ –≤ –ö—Ä–µ–º–µ–Ω—á—É—Ü—ñ —ñ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≤–∞–º —Ä–æ–∑–∫–ª–∞–¥ –≤ –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ. –Ø –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n${commandsMsgText}`;
const noUnderstandMsgText = `–°—Ö–æ–∂–µ —è –Ω–µ –∑–Ω–∞—é —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ üòï`;
const errorMsgText = `–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π üòï`;

const log = Log('lib');

const getBot = () => {
  const telegram = getTelegramApi({ token: config.bot.token });

  const processWebhookReq = async (data: unknown) => {
    if (isTGUpdate(data) && data.message) {
      await processTextMsg(data.message);
    } else {
      log.err('unknown update with data=', data);
    }
  };

  const processTextMsg = async (msg: TGMessage): Promise<void> => {
    const {
      text,
      chat: { id: chatId },
    } = msg;
    if (!text) {
      return;
    }
    log.debug(`[${chatId}] processing text msg`);

    if (isBotCmd(text, 'start')) {
      return sendTextMsg(chatId, helloMsgText);
    }

    if (isBotCmd(text, 'schedule')) {
      return processScheduleCmd(chatId);
    }

    return sendTextMsg(chatId, noUnderstandMsgText);
  };

  const processScheduleCmd = async (chatId: number) => {
    try {
      const cinemas: Cinema[] = await Promise.all([getGalaxyCinema(), getFilmaxCinema()]);
      const text = cinemasToMoviesMsg(cinemas);
      return sendMarkdownMsg(chatId, text);
    } catch (err: unknown) {
      log.err('process schedule cmd err', { msg: errToStr(err) });
      return sendTextMsg(chatId, errorMsgText);
    }
  };

  const sendTextMsg = async (chatId: number, val: string) => telegram.sendTextMessage(chatId, val);

  const sendMarkdownMsg = async (chatId: number, val: string) =>
    telegram.sendTextMessage(chatId, val, { parse_mode: 'Markdown' });

  return { processWebhookReq };
};

const isTGUpdate = (val: unknown): val is TGUpdate => isUnknownDict(val) && isNum(val.update_id);

const cinemasToMoviesMsg = (cinemas: Cinema[]): string => {
  const titles: string[] = [];
  for (const cinema of cinemas) {
    for (const movie of cinema.movies) {
      if (movie.type === 'going') {
        titles.push(movie.title);
      }
    }
  }
  return unique(titles)
    .map(itm => `üçø **${itm}**`)
    .join(`\n\n`);
};

export const cinemasBot = getBot();
